"""
Classes for storing and processing usg audit results.
"""

from dataclasses import dataclass
from pathlib import Path
from usg.exceptions import FileMoveError
import shutil
import logging
from typing import Any

logger = logging.getLogger(__name__)


@dataclass
class BackendArtifact():
    """
    File generated by a backend operation
    """
    type: str
    path: Path
    metadata: dict[str, Any]

    def move(self, new_path: Path | str) -> None:
        """
        Moves the file and updates the path to the new location.
        """
        new_file_path = Path(new_path).resolve()
        logger.debug(f"Moving {self.path} to {new_file_path}")
        try:
            new_file_path.parent.mkdir(parents=True, exist_ok=True)
            shutil.move(self.path, new_file_path)
        except Exception as e:
            raise FileMoveError(f"Failed to move {self.path} to {new_file_path}: {e}") from e
        self.path = new_file_path


class BackendArtifacts(list[BackendArtifact]):
    """
    List of artifacts generated by a backend operation.
    """
    def add_artifact(self, type: str, path: Path|str, metadata: dict[str, Any] | None = None) -> None:
        """
        Add a file to the list.

        Args:
            type: Type of the file
            path: Path to the file
            metadata: Metadata for the file

        Returns:
            None
        """
        if [True for a in self if a.type == type]:
            raise ValueError(f"Artifact with type {type} already exists")
        self.append(BackendArtifact(type, Path(path).resolve(), metadata or {}))


    def get_by_type(self, type: str) -> BackendArtifact:
        """
        Get a file by type. Raises ValueError if no file is found.

        Args:
            type: Type of the file to get

        Returns:
            BackendArtifact object

        Raises:
            ValueError: if no file is found
        """
        for file in self:
            if file.type == type:
                return file
        raise ValueError(f"No file found with type {type}")

    
    def move_to_dir(self, dir: Path | str, parent_dir_filter: Path | str) -> None:
        """
        Moves the artifacts to the given directory, if they are inside the parent_dir_filter directory.

        Args:
            dir: Path to the directory to move the artifacts to
            parent_dir_filter: Path to the parent directory to filter the artifacts by
        """
        dir = Path(dir).resolve()
        parent_dir_filter = Path(parent_dir_filter).resolve()
        for artifact in self:
            if parent_dir_filter in artifact.path.resolve().parents:
                artifact.move(dir / artifact.path.name)

@dataclass
class AuditResult:
    """
    Result of an audit.
    """
    rule_name: str
    state: str
    message: str


class AuditResults(list):
    """
    List of audit results.
    """
    def add_result(self, rule_name: str, state: str, message: str) -> None:
        """
        Add a result to the list.

        Args:
            rule_name: Name of the rule
            state: State of the rule
            message: Message of the rule

        Returns:
            None
        """
        r = AuditResult(rule_name, state, message)
        logger.debug(f"Adding result: {r}")
        self.append(r)

    def get_summary(self) -> str:
        """
        Get a summary of the audit results.

        Returns:
            Summary of the audit results
        """
        result_types = [
            "pass",
            "fail",
            "notapplicable",
            "error",
            "notchecked",
            "unknown",
        ]
        result_counts = {k: 0 for k in result_types}

        for result in self:
            if result.state in result_types:
                result_counts[result.state] += 1
            else:
                result_counts["unknown"] += 1
        return """\
Pass:  {pass}
Fail:  {fail}
Error: {error}
NotChecked: {notchecked}
Unknown: {unknown}
N/A:   {notapplicable}
""".format(
            **result_counts
        )
