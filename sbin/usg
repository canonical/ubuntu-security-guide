#!/bin/bash
#
# Ubuntu Security Guides
# Copyright (C) 2022 Canonical Limited
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#--------------------------------------------------------

# Run audit scan for CIS and DISA-STIG profiles
#
# See usg and oscap manpages for more instructions
###########################################################

# PROFILES point to the tailoring files which mirrors the profiles
declare -A PROFILES=( ["cis_level1_server"]="cis_level1_server-tailoring.xml" ["cis_level2_server"]="cis_level2_server-tailoring.xml" ["cis_level1_workstation"]="cis_level1_workstation-tailoring.xml" ["cis_level2_workstation"]="cis_level2_workstation-tailoring.xml" )

BASE_DIR="/usr/share/ubuntu-scap-security-guides/current"
TAILORING_DIR="$BASE_DIR/tailoring"
UBUNTU_VERSION="2204"
UBUNTU_CPE_DICTIONARY_FILE="$BASE_DIR/benchmarks/ssg-ubuntu${UBUNTU_VERSION}-cpe-dictionary.xml"
UBUNTU_XCCDF_FILE="$BASE_DIR/benchmarks/ssg-ubuntu${UBUNTU_VERSION}-xccdf.xml"
DATE=$(date +%Y%m%d.%H%M)
RESULTS_DIR="/var/lib/usg"
RESULTS_FILE="$RESULTS_DIR/usg-results-$DATE.xml"
HTML_FILE="$RESULTS_DIR/usg-report-$DATE.html"
LOG_FILE="$RESULTS_DIR/usg-log-$DATE.log"
DEFAULT_TAILORING="/etc/usg/default-tailoring.xml"

AUDIT_CMD="audit"
FIX_CMD="fix"
GENFIX_CMD="generate-fix"
GENTAIL_CMD="generate-tailoring"

umask 0077

keys="${!PROFILES[*]}"
prog_name=$(basename "$0")

function echoerr()
{
    >&2 echo -e "$@"
}

function usage_command()
{
    echoerr "Usage: ${prog_name} < $AUDIT_CMD | $FIX_CMD | $GENFIX_CMD | $GENTAIL_CMD > [options]\nAvailable commands are:"
    echo "    $AUDIT_CMD:Audits the current system
    $FIX_CMD:Audits and attempts to fix failed rules
    $GENFIX_CMD:Creates a bash script containing the fixes
    $GENTAIL_CMD:Create a tailoring file based on a profile"  | column -t -s':' -c2 >&2
    echoerr "\nUse ${prog_name} <command> --help for more information about a command."
}

function usage_common_options()
{
    echo "	--html-file <path to file>          Overrides the HTML output file
	--results-file <path to file>       Overrides the results file
	--oval-results                      Dumps the OVAL results files into the $RESULTS_DIR
	--debug                             Dumps more log files into the $RESULTS_DIR
"
}

function usage_profiles()
{
    echo "
The valid profiles are:
${keys// /, }" 1>&2
}

function usage_audit()
{
    echo "Usage: ${prog_name} $AUDIT_CMD ([ --tailoring-file <tailoring file> ] | <profile> ])

The audit command relies on the oscap command and the USG XCCDF and
OVAL files to audit the system, verifying if the system is compliant
with either a provided profile or a provided tailoring file.

Available options are:
	--tailoring-file <path to file>     Provides a tailoring file
					    instead of a profile. Any
					    profile provided is ignored"
usage_common_options

echo "Unless the --tailoring-file flag is provided, a profile must be given." 1>&2

usage_profiles
}

function usage_fix()
{
    echo "Usage: ${prog_name} $FIX_CMD ([ --tailoring-file <tailoring file> ] | <profile> ])

The fix command relies on the oscap command, the XCCDF and OVAL files
to audit the system. It verifies if the system is compliant with either
the set of rules of a provided profile or the set of rules of a provided
tailoring file. Then, for every rule which has failed the audit stage,
${prog_name} attempts to fix it.

Note that the oscap tries to audit the fixed rules just after the fix
process, but since many rules require a reboot in order to complete
the fix process, usually this audit will fail with an error status.
Reboot the system and run the audit command in order to fetch a
reliable report.

Available options are:
	--tailoring-file <path to file>     Provides a tailoring file
					    instead of a profile. Any
					    profile provided is ignored"

usage_common_options

echo "Unless the --tailoring-file flag is provided, a profile must be given." 1>&2

usage_profiles
}

function usage_genfix()
{
    echo "Usage: ${prog_name} $GENFIX_CMD [ --output <path to output file> ] ([ --tailoring-file <tailoring file> ] | <profile> ])

The generate-fix command relies on the oscap command, the XCCDF and
OVAL files to create a bash script file containing all the fixes
associated with either a provided profile or a provided tailoring file.

Available options are:
	--output <path to output file>      Writes the remediation file
					    to the provided path. Default
					    is standard output.
	--tailoring-file <path to file>     Provides a tailoring file
					    instead of a profile. Any
					    profile provided is ignored
"

echo "Unless the --tailoring-file flag is provided, a profile must be given." 1>&2

usage_profiles
}

function usage_gentail()
{
    echo "Usage: ${prog_name} $GEN_TAILORING <profile> <path to output file>

The generate-tailoring command creates a tailoring file based on the
provide profile and saves it to the provided output path. To make this
tailoring file the default save it as $DEFAULT_TAILORING

This command requires a profile upon which the tailoring file will be created.
All rules present in the base profile will also be present in the tailoring file."

usage_profiles
}

function benchmarks_error()
{
    echo "Error: could not find any benchmark bundle installed.

Verify if there is any 'usg-benchmarks-<VERSION>' package installed or if the
alternatives entry 'usg_current_benchmarks' is properly configured.

<VERSION> is the version number of the benchmark bundle contained into the package." 1>&2
}

remediation_file=""
output_flag=""
tailoring_flag=""
oval_results_flag=""

function usage
{
    case "$1" in
        command)
            usage_command
            ;;
        $AUDIT_CMD)
            usage_audit
            ;;
        $FIX_CMD)
            usage_fix
            ;;
        $GENFIX_CMD)
            usage_genfix
            ;;
        $GENTAIL_CMD)
            usage_gentail
            ;;
        *)
            echoerr "ABORT! This function requires one of the parameters above!"
            exit 1
    esac
}

function validate_profile
{
    local profile=$1

    if [ -z "$1" ];then
        echoerr "Error: a profile or a tailoring file must be provided."
        usage "${command}"
        exit 1
    fi

    if [ "$profile" == "disa_stig" ]; then
        echoerr "disa_stig profile not yet available for Ubuntu 22.04!"
        usage "${command}"
        exit 1
    fi

    # profile selected must in the list of profiles
    if [ -z "${PROFILES[$profile]}" ]; then
        echoerr "Error: profile '$profile' is not valid!"
        usage "${command}"
        exit 1
    fi
}

function validate_tailoring_file
{
    # ignore any profile passed. Fetch the profile from the tailoring file instead.
    if [ ! -f "${tailoring_file}" ]; then
        echoerr "Error: tailoring file '${tailoring_file}' must exist and be a regular file"
        exit 1
    fi

    # Tailoring file must contain a profile
    profile=$(grep -Po 'Profile\b.*id=".*"\s+' ${tailoring_file} | grep -Po '(?<=id=").*(?=")')
    if [ -z "${profile}" ]; then
        echoerr "Error: tailoring file '${tailoring_file}' doesn't contain a profile"
        exit 1
    fi

    local tail_benchmark_elem=$(grep -P '^\s+\<benchmark\s+href=".*"\s*/\>' "${tailoring_file}" | grep -Po '(?<=href=").*(?="\s*/\>)')
    local benchmark_path=$(realpath -e "${BASE_DIR}")
    local benchmark_vers_num=$(basename "${benchmark_path}")
    local tail_vers_num=$(basename $(dirname $(dirname "${tail_benchmark_elem}")))

    # Value extract from href attribute of benchmark element must have a version number
    echo "${tail_vers_num}" | grep -qE '[0-9]+'
    if [ $? -ne 0 ]; then
        echoerr "Error: Could not find a valid version number in tailoring file '${tailoring_file}'"
        exit 1
    fi

    # Tailoring file version must match the selected Benchmarks version
    local tail_benchmark_path=$(dirname $(dirname "${tail_benchmark_elem}"))
    if [ "${benchmark_vers_num}" -ne "${tail_vers_num}" ]; then
        echoerr "Error: tailoring file '${tailoring_file}' version '${tail_vers_num}' does not match the current Benchmarks package version '${benchmark_vers_num}'"
        echoerr "Install the 'usg-benchmarks-${tail_vers_num}' package and/or change the 'usg_benchmarks' alternatives link to point to '${tail_benchmark_path}'"
        exit 1
    fi

    # Base benchmark used by tailoring file must belong to the Benchmarks package path
    if [ "$(dirname $(dirname ${tail_benchmark_elem}))" != "${benchmark_path}" ]; then
        echoerr "Error: benchmark element of tailoring file '${tailoring_file}' has path '${tail_benchmark_elem}' which is not under the current Benchmarks path '${benchmark_path}'"
        exit 1
    fi

    # Benchmark element inside tailoring file must point to an existing XCCDF file
    if [ -z "${tail_benchmark_elem}" ] || [ ! -f "${tail_benchmark_elem}" ]; then
        echoerr "Error: tailoring file '${tailoring_file}' must contain a benchmark element pointing to a valid XCCDF file"
        exit 1
    fi
}

function generate_fix_script
{
    remediation_file="$PWD/${profile}-$DATE.sh"
    command="oscap xccdf generate --profile ${profile} fix --fix-type bash ${tailoring_flag} ${output_flag} $UBUNTU_XCCDF_FILE > ${remediation_file}"

    # Run the command
    echoerr "USG will execute the following command for generating fix: ${command}"
    if eval "$command"; then
        echoerr "USG generate-fix command completed."
    else
        echoerr "USG generate-fix command failed!"
        exit 1
    fi
}

######### Main execution #########
# Handle parameters

if [ $# -eq 0 ]; then
    usage "command"
    exit 1
fi

# Command must be audit or generate-fix
command="$1"

case "${command}" in
    $AUDIT_CMD|$FIX_CMD)
        shift
        all_params=$(getopt -n ${prog_name} -oh --long tailoring-file:,html-file:,results-file:,oval-results,debug,help -- "$@")
        ;;
    $GENFIX_CMD)
        shift
        all_params=$(getopt -n ${prog_name} -oh --long output:,tailoring-file:,help -- "$@")
        ;;
    $GENTAIL_CMD)
        shift
        all_params=$(getopt -n ${prog_name} -oh --long help -- "$@")
        ;;
    --help)
        usage "command"
        exit 0
        ;;
    *)
        echoerr "Error: invalid command '${command}'!"
        usage "command"
        exit 1
esac

if [ $? -gt 0 ]; then
    usage "${command}"
    exit 1
fi
eval set -- "${all_params}"

while true ; do
    case "$1" in
        --output)
            output_flag="$1 $2"; shift 2 ;;
        --tailoring-file)
            tailoring_file=$2; shift 2 ;;
        --html-file)
	        HTML_FILE=$2; shift 2 ;;
        --results-file)
            RESULTS_FILE=$2; shift 2 ;;
        --oval-results)
            oval_results_flag="--oval-results"; shift ;;
        --debug)
            oval_results_flag=""
            debug_flag="--verbose INFO --verbose-log-file $LOG_FILE --oval-results"; shift ;;
        -h|--help)
            usage "${command}"
            exit 0
            ;;
        --)
            shift ; break ;;
        *) echoerr "Error: invalid option!"; exit 1 ;;
    esac
done

if [ "$(id -u)" -ne 0 ]; then
   echoerr "Error: this script must be run with super-user privileges."
   exit 1
fi

# Check if there are benchmarks properly set through the current pointer
realpath -e "${BASE_DIR}" &>/dev/null
if [ $? -gt 0 ]; then
    benchmarks_error
    exit 1
fi

# If command-line contains no profile or tailoring file, try to use the default tailoring file
if [ ! -v "$tailoring_file" ] && [ -z "$1" ]; then
    if [ -f $DEFAULT_TAILORING ]; then
        echo "Using the default tailoring file at $DEFAULT_TAILORING"
        tailoring_file=$DEFAULT_TAILORING
    fi
fi

# If there isnt a tailoring file, check the profiles and build the oscap profile option to  with a profile
if [ ! -v tailoring_file ]; then
    ##Validate arguments if a level for scan is specified
    validate_profile "$1"
    profile=${1#disa_} # HACK: disa_stig is named stig on the XCCDF file.
else
    # assert that generate-tailoring command doesn't reach this code block
    if [ "${command}" == $GENTAIL_CMD ]; then
        echoerr "ABORT! WRONG CODE SECTION REACHED! $GEN_TAIL COMMAND DOESN'T ACCEPT OPTIONS OTHER THAN --help"
        exit 2
    fi

    if [ -n "$1" ];then
	echoerr "You cannot provide both a tailoring file and a profile!"
	exit 1
    fi

    # Attempts to validate tailoring file. Exits with an error message if unable.
    validate_tailoring_file

    tailoring_flag="--tailoring-file $(realpath ${tailoring_file})"
fi

# Build the command based on the operation provided
case "${command}" in
    $AUDIT_CMD|$FIX_CMD)
        audit_command="oscap xccdf eval --profile ${profile} --cpe $UBUNTU_CPE_DICTIONARY_FILE --results $RESULTS_FILE ${tailoring_flag} ${debug_flag} ${oval_results_flag} $UBUNTU_XCCDF_FILE"

        # remove old results file
        mkdir -p "$RESULTS_DIR"
        rm -f "$RESULTS_FILE"

        # Run the command
        echoerr "USG will execute the following command for auditing: ${audit_command}"

        # move to RESULTS_DIR so --oval-results generated files are together with
        # the other files, as --oval-results creates the files in PWD/CWD
        pushd "$RESULTS_DIR" > /dev/null
        eval "$audit_command"
        # some oscap logs are generated automatically and we cannot specify their name
        # therefore this is needed if we want to have historical logs. For now this is
        # hardcoded
        if [ -n "${debug_flag}" ]; then
            mv "ssg-ubuntu$UBUNTU_VERSION-oval.xml.result.xml" "ssg-ubuntu$UBUNTU_VERSION-oval.xml.result-$DATE.xml"
            mv "%2Fusr%2Fshare%2Fubuntu-scap-security-guides%2Fcurrent%2Fbenchmarks%2Fssg-ubuntu$UBUNTU_VERSION-cpe-oval.xml.result.xml" "ssg-ubuntu$UBUNTU_VERSION-cpe-oval.xml.result-$DATE.xml"
        fi
        popd > /dev/null

        if [ -e "${RESULTS_FILE}" ]; then
            ##Generate a html report
            oscap xccdf generate report "$RESULTS_FILE" > "$HTML_FILE"

            if [ "${command}" == $FIX_CMD ]; then
                pushd "$RESULTS_DIR" > /dev/null
                generate_fix_script
                command="bash -x ${remediation_file} 2>&1 1>remediation-$DATE.log | tee -a remediation-$DATE.log"
                echoerr "USG will execute the following command for remediating: ${command}"
                exec 3>"remediation-$DATE.log"
                export BASH_XTRACEFD=3
                eval "$command"
                exec 3>&-
                unset BASH_XTRACEFD
                popd > /dev/null
                echoerr "USG fix command completed."
                echoerr "A system reboot is required to complete the fix process."
                echoerr "Please run usg audit after reboot."
            else
                echoerr "USG audit scan command completed. The scan results are available in $HTML_FILE report or in $RESULTS_FILE."
            fi
        else
            echoerr "USG audit scan command failed!"
            exit 1
        fi
        ;;
    $GENFIX_CMD)
        generate_fix_script
        ;;
    $GENTAIL_CMD)
        # generate-tailoring command is the only one which has 2 parameters after this. Check for them
        if [ $# -ne 2 ]; then
            usage "${command}"
            exit 1
        fi

        command="cp $TAILORING_DIR/${PROFILES[${profile/#stig/disa_stig}]} ${2}" # HACK: disa_stig is the accepted profile by the script, while the XCCDF uses stig

        echoerr "USG will execute the following command for generating a new tailoring file: ${command}"
        if eval "$command"; then
            echoerr "USG generate-tailoring command completed."
        else
            echoerr "USG generate-tailoring command failed!"
            exit 1
        fi
        ;;
    *)
        ;;
esac
exit 0
